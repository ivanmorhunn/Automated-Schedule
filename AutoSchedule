function deletePastDatesAndReorder() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var today = new Date();
  today.setHours(0, 0, 0, 0); 
  var dataRange = sheet.getDataRange();

  // Get both the data and the background colors
  var data = dataRange.getValues();  
  var colors = dataRange.getBackgrounds();  // Get all background colors
  var existingFormats = sheet.getConditionalFormatRules();  // Get all conditional formatting rules

  // Filter out past dates and store the remaining rows
  var futureData = [];
  var futureColors = [];
  for (var i = 1; i < data.length; i++) {  // Start from row 2
    var date = new Date(data[i][0]);  
    date.setHours(0, 0, 0, 0); 
    if (date >= today) {
      futureData.push(data[i]);
      futureColors.push(colors[i]);  // Save the row's background colors
    }
  }

  // Sort the remaining future data by date in ascending order (earliest first)
  var combinedData = [];
  for (var i = 0; i < futureData.length; i++) {
    combinedData.push([futureData[i], futureColors[i]]);
  }

  combinedData.sort(function(a, b) {
    return new Date(a[0][0]) - new Date(b[0][0]);  // Sort by the date in the first column of each row
  });

  // Extract sorted data and colors after sorting
  futureData = combinedData.map(function(row) { return row[0]; });
  futureColors = combinedData.map(function(row) { return row[1]; });

  // Clear the contents and formats (including background colors) of old rows
  // Clear everything except for the header row
  var numRows = sheet.getMaxRows();
  if (numRows > futureData.length + 1) {
    sheet.deleteRows(futureData.length + 2, numRows - futureData.length - 1);
  }

  // Clear any background color of the remaining empty rows below the data range
  sheet.getRange(futureData.length + 2, 1, numRows - futureData.length - 1, sheet.getMaxColumns()).setBackground(null);

  // Insert the sorted future data and their corresponding background colors back into the sheet
  sheet.getRange(2, 1, futureData.length, futureData[0].length).setValues(futureData);

  // Apply background colors excluding columns A through G
  if (futureColors.length > 0 && futureColors[0].length > 7) {
    var adjustedColors = futureColors.map(row => row.slice(7)); // Exclude columns A to G
    sheet.getRange(2, 8, adjustedColors.length, adjustedColors[0].length).setBackgrounds(adjustedColors);
  }

  // Center align all rows containing future data
  sheet.getRange(2, 1, futureData.length, futureData[0].length).setHorizontalAlignment("center");

  // Reset colors in the range B2:G300
  sheet.getRange(2, 2, 299, 6).setBackground(null);

  // Reapply the existing conditional formatting rules
  sheet.setConditionalFormatRules(existingFormats);
}

function createTrigger() {
  // Create a time-driven trigger to run the delete function every day at midnight
  ScriptApp.newTrigger('deletePastDatesAndReorder')
    .timeBased()
    .everyDays(1)
    .atHour(0)  // Runs at midnight
    .create();
}
