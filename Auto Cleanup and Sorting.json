{"files":[{"id":"445463d9-00db-4951-92ce-fa0b878179de","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/New_York\",\n  \"dependencies\": {\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"548f357a-0fa6-4b85-a4c8-5df09cccb92b","name":"Code","type":"server_js","source":"function deletePastDatesAndReorder() {\n  var sheet \u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  var today \u003d new Date();\n  today.setHours(0, 0, 0, 0); \n  var dataRange \u003d sheet.getDataRange();\n\n  // Get both the data and the background colors\n  var data \u003d dataRange.getValues();  \n  var colors \u003d dataRange.getBackgrounds();  // Get all background colors\n  var existingFormats \u003d sheet.getConditionalFormatRules();  // Get all conditional formatting rules\n\n  // Filter out past dates and store the remaining rows\n  var futureData \u003d [];\n  var futureColors \u003d [];\n  for (var i \u003d 1; i \u003c data.length; i++) {  // Start from row 2\n    var date \u003d new Date(data[i][0]);  \n    date.setHours(0, 0, 0, 0); \n    if (date \u003e\u003d today) {\n      futureData.push(data[i]);\n      futureColors.push(colors[i]);  // Save the row\u0027s background colors\n    }\n  }\n\n  // Sort the remaining future data by date in ascending order (earliest first)\n  var combinedData \u003d [];\n  for (var i \u003d 0; i \u003c futureData.length; i++) {\n    combinedData.push([futureData[i], futureColors[i]]);\n  }\n\n  combinedData.sort(function(a, b) {\n    return new Date(a[0][0]) - new Date(b[0][0]);  // Sort by the date in the first column of each row\n  });\n\n  // Extract sorted data and colors after sorting\n  futureData \u003d combinedData.map(function(row) { return row[0]; });\n  futureColors \u003d combinedData.map(function(row) { return row[1]; });\n\n  // Clear the contents and formats (including background colors) of old rows\n  // Clear everything except for the header row\n  var numRows \u003d sheet.getMaxRows();\n  if (numRows \u003e futureData.length + 1) {\n    sheet.deleteRows(futureData.length + 2, numRows - futureData.length - 1);\n  }\n\n  // Clear any background color of the remaining empty rows below the data range\n  sheet.getRange(futureData.length + 2, 1, numRows - futureData.length - 1, sheet.getMaxColumns()).setBackground(null);\n\n  // Insert the sorted future data and their corresponding background colors back into the sheet\n  sheet.getRange(2, 1, futureData.length, futureData[0].length).setValues(futureData);\n\n  // Apply background colors excluding columns A through G\n  if (futureColors.length \u003e 0 \u0026\u0026 futureColors[0].length \u003e 7) {\n    var adjustedColors \u003d futureColors.map(row \u003d\u003e row.slice(7)); // Exclude columns A to G\n    sheet.getRange(2, 8, adjustedColors.length, adjustedColors[0].length).setBackgrounds(adjustedColors);\n  }\n\n  // Center align all rows containing future data\n  sheet.getRange(2, 1, futureData.length, futureData[0].length).setHorizontalAlignment(\"center\");\n\n  // Reapply the existing conditional formatting rules\n  sheet.setConditionalFormatRules(existingFormats);\n}\n\nfunction createTrigger() {\n  // Create a time-driven trigger to run the delete function every day at midnight\n  ScriptApp.newTrigger(\u0027deletePastDatesAndReorder\u0027)\n    .timeBased()\n    .everyDays(1)\n    .atHour(0)  // Runs at midnight\n    .create();\n}\n"}]}